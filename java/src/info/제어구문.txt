[제어구문]
- 문장의 흐름을 정의하는 구문

1. 문장의 종류
   - 순차형 : 순서대로 명령문이 실행되도록 구현
   - 선택형(조건형) : 조건을 주고 조건에 만족하는 경우, 조건에 만족하지 않는 경우 실행할 문장을 따로 정의
   - 순환형 : 특정 문장을 반복해서 실행할 수 있도록 구현
   

2. 조건제어문
   - 선택형을 구현
   - 모든 제어구문은 중첩이 가능하다.
      if(조건){
         if(조건){
             if(조건){
                .....
             }
         }else{
            ....
         }
      }else{
      
      
      }
   1) if
      - 기본if
         if(조건){
             조건을 만족하는 경우 실행할 문장
         }
         
      - if ~ else문
        if(조건){
           조건을 만족하는 경우 실행할 문장
        }else{
           조건을 만족하지 않는 경우 실행할 문장
        }    
        
      - if ~ else if ~ else문
        : 동일한 변수에 판단해야하는 조건이 여러 개 있는 경우 사용하는 if문
          수치데이터를 비교연산자를 써서 조건으로 판단하는 경우 큰 값을 맨 위에 명시
          다른 if문과 마찬가지로 { }안에 if문을 중첩해서 사용할 수 있다.
        if(조건1){
            조건1을 만족하는 경우 실행할 문장  
        }else if(조건2){
            조건2를 만족하는 경우 실행할 문장
        }else if(조건3){
            .....
            .....
        }else{
        
        }
          
   2) switch
      - 다중조건에 대한 제어를 위한 구문
      - if ~ else if ~ else if...를 대신해서 사용할 수 있다.
      - 정확하게 일치하는 값을 비교하는 경우 사용
      - case문에는 break문을 모두 추가해야 한다.
                 -------
                    break가 정의된 위치의  block을 빠져나간다.
      [구문]
      switch(평가하기 위한 값 ){
            ---------------
                  연산식(if문처럼 true /false를 리턴하는 논리연산이 아니라 값을 리턴하는 연산식 - 산술연산)
                                          , 변수에 저장된 값, 메소드 호출 결과
                  평가하기 위한 값 - int 로 casting될 수 있는 타입(byte,short,int,char), String
                                              
          case 평가할값의 유형1:
                값1인경우 실행할 문장
                break;
          case 평가할값의 유형2:       -------------> 부등호를 사용할 수 없다.       
      			값2인경우 실행할 문장
      			...
      			...
      			break;
      	  default:
      	       case유형에 해당하지 않는 값인 경우 실행할 문장		
      }
      
3. 반복제어문(순환문)
   1) for
      - 정해진 횟수만큼 명령문을 반복해서 실행해야 하는 경우
      - 실행횟수가 정해져 있는 경우 사용
      - 실행횟수를 체크할 수 있는 int변수가 필요
      
      [구문]
      for(초기값;조건;증감식){
      	반복해서 실행할 명령문
      }
      - 초기값
        int 변수명=초기값
        최초 변수에 값을 초기화 시키며 start값을 지정
        for문 블럭 안에서 필요한 값이 있으면 초기값을 그에 맞게 정의하면 된다.
        그렇지 않은 경우는 원하는대로 정의할 수 있다.
      - 증감식 
        변수++
        변수--
        변수 = 변수+2
        초기화시킨 변수의 값을 변경하기 위해 필요
      - 조건
        초기값이 증감식에 의해 변화되며 횟수를 체크하기 조건     
        
      ================ 실습예제 ================
      1. 1부터 100까지의 합을 출력하세요
          hint : for문의 블럭에 추가하면 i값이 바뀌면서 결과적으로 값이 누적된다. i = i + 1
         [출력형태]
         총합:______
         짝수합:_______
         홀수합:_______
         
         HapExam.java
         
      2. A부터 Z까지 출력하세요
         hint: System.out.println(65)이 문장을 실행하면 65가 출력된다.
               System.out.println((char)65) 이 문장을 실행하면 문자로 출력된다.
         [출력형태]
         ABCDEF........Z   
         
         AlphaExam.java
         
         메일로 제출하기
   2) while
      - 조건을 판단해서 결과가 true이면 반복해서 실행
      - 조건을 구문의 첫 번째 문장에서 판단하므로 조건이 만족하지 않으면 while블럭을 실행하지 않는다.
      [구문]
      while(조건식){
          ---------
              true나 false가 리턴되는 연산식 or true나 false를 리턴하는 메소드 호출문
          
          조건이 만족할때 실행할 명령문
              
      }
      
      [실습예제]
      HapExam.java를 while문으로 변경하기
      HapExam_while.java로 작성
      
      GuGuExam을 while로 변경하기
      GuGuExam_While.java
      DM으로 제출
      
      
      [8월16일선택과제]
      Calc.java 를 실행하고 종료를 선택하기 전까지 메뉴가 계속 출력되면서 선택할 수 있도록 수정하기
      Calc_While.java
        - while or do~while 사용
       
      
   3) do~while
      - 조건을 판단해서 결과가 true이면 반복해서 실행
      - 조건을 구문의 마지막 문장에서 판단하므로 조건이 만족하지 않아도 한 번은 블럭이 실행된다.
      do{
          //조건이 만족하는 동안 실행할 명령문
      
      }while(조건);
   
4. 반복실행을 제어
   1) break
      - 반복 실행 중에 반복문을 빠져나가기 위해 사용하는 명령문
      - break가 속한 블럭을 빠져나간다.
      - for문을 중첩해서 사용하는 경우 내부for에 break가 선언되면 내부for의 실행이 중단된다.
      - 반복문을 실행 종료하기 위한 목적으로 사용
   2) continue   
      - 반복 실행 중에 실행해야할 명령문을 skip하기 위해 사용하는 명령문

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   