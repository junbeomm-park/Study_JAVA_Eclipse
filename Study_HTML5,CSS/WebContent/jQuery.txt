jQuery
	- 자바스크립트로 만들어진 라이브러리, 프레임워크 처럼 사용된다.
	- DOM을 쉽게 사용할 수 있도록 지원한다.
	- 크로스브라우징을 구현
	  ----------
	  모든 브라우저에서 동일한 뷰를 볼 수 있도록 구성
	  
	  
1. 기능
	- DOM
	  : DOM객체의 필수 속성, 메소드, 노드제어, 스타일제어
	- Ajax
	- 플러그인
	  : 필요한 기능을 만들어서 제공하는 것(jQuery로 만들어진 완제품)
	- Effect
	  : 애니메이션 효과
	  
	  
2. jQuery 사용방법
	1) 라이브러리 파일을 직접 다운로드 받아서 프로젝트에 추가한 후에 사용하는 방법(js파일 추가)
		- compresses : jquery-3.6.0.min.js(압축버전 - 로딩속도 빠름)
		- uncompressed : jquery-3.6.0.js(개발자버전 - 수정해서 작업이 가능)
		=> 자바스크립트 외부라이브러리를 추가해서 사용하는 방법으로 다른 라이브러리를 추가할때 응용작업
	2) cdn방식
		- 외부사이트에서 공유한 jQuery라이브러리 경로를 추가해서 작업
		
3. 형식
	1) ready handler이용
		- 자바스크립트이므로 <script></script>태그내에서 작업
		- ready handler는 브라우저 내부에서 DOM객체가 생성이 완료되면 jQuery작업을 시작하겠다는 의미
			$(document).ready(function(){
			-----------------
			   선택자     이벤트
			         // 자바스크립트 문법 or jQuery코드
			
			
			})
			
	2) 일반적인 jQuery문법
		$("선택자").동작()
		- -------  ----
		|    |       |___________________________________________ jQuery js파일에 미리 정의되어 있는 실행할 수 있는 기능
		|    |__ css와 거의 동일 (class속성 -> . , id속성 -> #
		|
		|____ jQuery를 의미
			  jQuery의 약식기호
			  
		
		=> 무엇을 어떻게
		  -----  -----
		  선택자    동작,이벤트를 같이 정의  
			  
			  
4. 선택자
	- $(객체) : 선택자로 지정한 객체에 적용
	- $("*") : DOM객체의 모든 요소에 적용
	- $("#id명") : 작성한 id속성으로 정의된 요소에 적용 (1개의 요소)
	- $(".class명") : 작성한 class속성으로 정의된 모든 요소에 적용
	- $("태그명") : 해당 태그로 정의된 모든 요소에 적용
	- $(this) : 현재 작업 중인 엘리먼트(객체)에 적용하겠다는 의미
	- $("태그명1 태그명2") : 태그1의 하위로 정의되어 있는 태그2를 선택자로 사용
	- $("태그명.클래스명") : class속성으로 정의된 특정 태그를 선택자로 사용
	- $("태그명:first") : 태그들 중 첫 번째 엘리먼트를 선택자로 사용
	- $("태그명1 태그명2:first-child") : 모든 태그명1의 하위 엘리먼트 중 첫 번째 엘리먼들을 선택자로 사용
		  ex) $("ul li:first-child") => 모든 ul의 첫 번째 li들이 선택
	- $("[속성명]") : 작성한 속성을 갖고 있는 모든 엘리먼트를 선택자로 사용
	- $("태그명[속성명=속성값]") : 특정태그의 속성과 속성값을 비교해서 일치하는 엘리먼트를 선택자로 사용
	- $(":input태그의 type") : 해당 type속성으로 정의된 form태그의 요소가 선택
							  HTML5의 요소에도 적용
	     ex) $(":button") : <input type = "button">인 요소와 <button>인 요소 모두 선택자로 사용	
	- $("태그명:even") : 짝수
	- $("태그명:odd") : 홀수
	
5. DOM제어메소드
	append()->선택된 요소의 last child노드로 추가
	prepend()->선택된 요소의 first child노드로 추가
	after()->선택된 요소의 뒤에 새로운 형제노드 추가
	before()->선택된 요소의 앞에 새로운 형제노드 추가
	remove()-> 선택된 요소와 그 자식 요소를 삭제
	empty()->선택된 요소의 자식요소 삭제
	
6. setter/getter메소드
	text() -> 원하는 위치에 텍스트를 추가 - setter/getter모두 사용가능
				=> div, p, span태그의 텍스트를 반환하거나 텍스트를 설정
				=> innerHTML로 작업하던 것과 동일
				=> html태그를 적용할 수 없다.
	val() -> 입력필드의 값을 반환하거나 설정 - setter/getter 모두 사용 가능
	html("추가되는 태그") -> 원하는 위치에 html태그를 추가한다.
							text()는 태그를 문자열로 추가하지만 html()은 태그를 실행한다.
	css() -> css속성을 설정
	attr() -> 태그의 속성을 셋팅 DOM의 표준 API메소드에서 setAttribute와 동일
	
7.이벤트
	1) on()을 이용하는 방법 - 정식방법
		=> bind()의 성능을 개선한 방법 
		=> 사용자의 선택으로 만들어지는 동적 요소에 이벤트를 연결하기 위해서 사용
		$("선택자").on("이벤트명",function() {
		
		});
		=> 선택자에 해당하는 요소에 이벤트가 발생하면 익명의 함수를 실행하겠다는 의미
		
	2) bind()를 이용
	3) 이벤트에 대한 약식표현
	   객체.click()
	   => 편하지만 동적으로 생성되는 요소에는 사용할 수 없다.
8.Effect
	hide() : 선택된 요소를 화면에서 감춘다.
	animate
		=> 커스텀 애니메이션을 만들때 사용
			이동, 효과를 정의하는 것은 모두 css효과를 적용
			
		[형식]
		.animate( properties[, duration ] [, easing ] [, complete ] )
		properties : { } 로 표현이 가능하며 필수로 지정해야 하는 매개변수 - css속성
		duration(speed) : 효과가 나타나는 속도를 의미 - 단위 (millisecond)
		easing : 포인트 이동할때 애니메이션 속도를 지정
		complete : callback으로 함수명을 명시
				   animate메소드의 실행이 끝나고 처리해야 하는 코드가 있는 경우 함수명의 정의
9.jQuery UI
10.bootstrap
				  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  